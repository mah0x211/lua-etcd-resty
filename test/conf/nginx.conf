daemon off;
worker_processes    1;

events {
    worker_connections  1024;
    accept_mutex_delay  100ms;
}


http {
    sendfile            on;
    tcp_nopush          on;
    #keepalive_timeout  0;
    keepalive_requests  500000;
    #gzip               on;
    open_file_cache     max=100;
    include             mime.types;
    default_type        text/html;
    index               index.htm;
    resolver            8.8.8.8;
    resolver_timeout    5;
    
    #
    # log settings
    #
    access_log  off;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    
    
    # 
    # lua global settings
    #
    lua_check_client_abort  on;
    lua_code_cache          on;
    #
    # initialize script
    #
    init_by_lua "
        -- preload
        require('util');
        require('etcd.resty');
        require('tryout.sandbox');
        cjson = require('cjson.safe');
        inspect = require('util').inspect;
        HttpCliResty = require('httpcli.resty');
        
        for k, v in pairs( TRYOUT_SANDBOX ) do
            _G[k] = v;
        end
        
        local evalfile = require('util').evalfile;
        local cwd = require('process').getcwd() .. '/tests/';
        function runOnSandbox( rpath )
            local fn, err = evalfile( cwd .. rpath, _G );
            
            if err then
                return false, err;
            end
            
            raise.nraise();
            return pcall( fn );
        end
    ";
    
    #
    # Admin Console
    #
    server {
        listen      1080;
        root        html;
        
        #
        # content handler: html
        #
        location ~* \.(html|htm)$ {
            content_by_lua "
                local res = {};
                
                for _, file in ipairs({
                    'admin_try.lua',
                    'cas_try.lua',
                    'dir_try.lua',
                    'in_order_try.lua',
                    'keys_try.lua',
                    'new_try.lua',
                    'stats_try.lua',
                    'ttl_try.lua',
                    'version_try.lua',
                    --'wait_try.lua'
                }) do
                    res[file] = { runOnSandbox( file ) };
                end
                
                res = cjson.encode( res );
                ngx.say( res );
            ";
        }
        
        #
        # proxy
        #
        location /proxy_gateway {
            internal;
            rewrite_by_lua          "HttpCliResty.proxy();";
            proxy_redirect          off;
            proxy_connect_timeout   60;
            proxy_send_timeout      60;
            proxy_read_timeout      60;
            proxy_pass              $uri;
            proxy_pass_request_body on;
        }
    }
}


